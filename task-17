
---

## ✅ **Kubernetes Task: Injecting ConfigMaps & Secrets via Environment Variables**

### 🎯 **Objective:**

Learn how to securely distribute configuration data and credentials into Pods using **ConfigMaps**, **Secrets**, and **environment variables**.

---

### 🧠 **Prerequisites**

* A running Kubernetes cluster (e.g., KIND, Minikube, kOps)
* `kubectl` configured
* Basic familiarity with Pod YAML

---

### 📘 **Task List**

---

#### 🏷️ **Task 1: Create a Namespace (Optional)**

* [ ] Create a dedicated namespace for this exercise:

  ```bash
  kubectl create namespace config-secret-demo
  ```

---

#### 📄 **Task 2: Define a Secret**

Following the guide, create a Secret named `db-user-pass` containing:

* `username=myappuser`
* `password=$(openssl rand -base64 12)` (or any strong password)

```bash
kubectl create secret generic db-user-pass \
  --from-literal=username=myappuser \
  --from-literal=password='S3cr3tP@ssw0rd' \
  -n config-secret-demo
```

✅ Verify:

```bash
kubectl get secret db-user-pass -n config-secret-demo
kubectl describe secret db-user-pass -n config-secret-demo
```

---

#### 📄 **Task 3: Define a ConfigMap**

Create a ConfigMap named `app-config` from inline data:

* `APP_MODE=production`
* `LOG_LEVEL=info`

```bash
kubectl create configmap app-config \
  --from-literal=APP_MODE=production \
  --from-literal=LOG_LEVEL=info \
  -n config-secret-demo
```

✅ Verify:

```bash
kubectl get configmap app-config -n config-secret-demo
kubectl describe configmap app-config -n config-secret-demo
```

---

#### 📦 **Task 4: Create a Pod That Consumes Both**

Write a Pod manifest `env-demo-pod.yaml` in namespace `config-secret-demo`:

```yaml
apiVersion: v1
kind: Pod
metadata:
  name: env-demo
  namespace: config-secret-demo
spec:
  containers:
  - name: demo-container
    image: busybox
    command: ["sh", "-c", "env; sleep 3600"]
    env:
    # From ConfigMap
    - name: APP_MODE
      valueFrom:
        configMapKeyRef:
          name: app-config
          key: APP_MODE
    - name: LOG_LEVEL
      valueFrom:
        configMapKeyRef:
          name: app-config
          key: LOG_LEVEL
    # From Secret
    - name: DB_USERNAME
      valueFrom:
        secretKeyRef:
          name: db-user-pass
          key: username
    - name: DB_PASSWORD
      valueFrom:
        secretKeyRef:
          name: db-user-pass
          key: password
```

* [ ] Apply the Pod:

  ```bash
  kubectl apply -f env-demo-pod.yaml
  ```
* [ ] Verify it’s running:

  ```bash
  kubectl get pods -n config-secret-demo
  ```
* [ ] Exec into it and inspect environment:

  ```bash
  kubectl logs env-demo -n config-secret-demo
  # or
  kubectl exec -it env-demo -n config-secret-demo -- sh -c "env"
  ```

✅ You should see `APP_MODE`, `LOG_LEVEL`, `DB_USERNAME`, and `DB_PASSWORD` in the output.

---

#### 🧹 **Task 5: Clean Up (Optional)**

* [ ] Delete the Pod, ConfigMap, and Secret:

  ```bash
  kubectl delete pod env-demo -n config-secret-demo
  kubectl delete configmap app-config -n config-secret-demo
  kubectl delete secret db-user-pass -n config-secret-demo
  kubectl delete namespace config-secret-demo
  ```

---

### 📝 **Task 6: Document Your Learnings**

Write a short blog or markdown summary covering:

* How ConfigMaps and Secrets differ
* How to inject data via `valueFrom: configMapKeyRef` and `secretKeyRef`
* Why you’d choose environment variables vs volume-mounted files
* Security considerations around Secrets
* Commands and YAML snippets used

---

### 📢 **Task 7: Share Publicly**

* [ ] Post a summary of your exercise on **LinkedIn or Twitter**:

  * Highlight key takeaways (secure config, decoupling, env injection)
  * Include YAML snippets or screenshots of `env` output
  * Tag relevant mentors or organizations
  * Use hashtags:
    `#Kubernetes #DevOps #LearningInPublic #ConfigMaps #Secrets #40DaysOfKubernetes`

---
